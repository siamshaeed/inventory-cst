<?php

namespace App\Models;

use App\Observers\ServiceRequestObserver;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;

class ServiceRequest extends Model
{
    use HasFactory;

    protected $table = "service_requests";

    protected $fillable = [
        'customer_id',
        'workshop_id',
        'service_list_id',
        'customer_request_time',
        'workshop_response_time',
        'workshop_distance',
        'issue_details',
        'vehicle_details',
        'repair_time',
        'repair_cost',
        'status',
        'position',
    ];



    protected $dates = [
        'customer_request_time',
        'workshop_response_time',
    ];


    protected $casts = [
        'user_position' => 'array',
        'workshop_position' => 'array',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::observe(ServiceRequestObserver::class);
    }


    /**
     * @return BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'customer_id', 'id');
    }

    /**
     * @return BelongsTo
     */
    public function workshop(): BelongsTo
    {
        return $this->belongsTo(Workshop::class, 'workshop_id', 'id');
    }


    /**
     * @return bool
     */
    public function isPending(): bool
    {
        return $this->status == 0;
    }


    /**
     * @return BelongsTo
     */
    public function service_list(): BelongsTo
    {
        return $this->belongsTo(ServiceList::class, 'service_list_id', 'id');
    }


    /**
     * distance in km
     * @return float
     */
    public function getDistance(): float
    {
        return round($this->workshop_distance * 0.001, 2);
    }


    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function serviceFeedback(): HasOne
    {
        return $this->hasOne(ServiceFeedback::class, 'service_request_id', 'id');
    }

}
